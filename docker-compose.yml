version: '3.8'

# Moby SwagStore - Secure MCP-Enabled E-commerce Platform
# Following pen-shop-demo architecture with proper Model Runner integration

x-common-variables: &common-variables
  POSTGRES_DB: swagstore
  POSTGRES_USER: swagstore_user
  REDIS_URL: redis://redis:6379
  MCP_GATEWAY_URL: http://mcp-gateway:8811
  CATALOGUE_URL: http://pen-catalogue:8081

x-security-labels: &security-labels
  - "security.hardened=true"
  - "security.rootless=true"
  - "security.network.isolated=true"

networks:
  frontend:
    driver: bridge
    internal: false
    labels:
      - "network.zone=dmz"
  backend:
    driver: bridge
    internal: true
    labels:
      - "network.zone=secure"
  monitoring:
    driver: bridge
    internal: false
    labels:
      - "network.zone=monitoring"

secrets:
  postgres_password:
    file: ./security/secrets/postgres_password.txt
  jwt_secret:
    file: ./security/secrets/jwt_secret.txt
  mcp_api_key:
    file: ./security/secrets/mcp_api_key.txt
  wazuh_api_key:
    file: ./security/secrets/wazuh_api_key.txt
  openai_api_key:
    file: ./security/secrets/openai_api_key.txt

services:
  # Frontend - Hardened Nginx with React App
  frontend:
    image: registry.hub.docker.com/dockerhub/hardened-nginx:1.25-alpine
    container_name: swagstore-frontend
    user: "1000:1000"  # rootless
    restart: unless-stopped
    ports:
      - "3000:80"
    volumes:
      - ./src/frontend/dist:/usr/share/nginx/html:ro
      - ./config/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./security/certificates:/etc/nginx/ssl:ro
    environment:
      - CATALOGUE_SERVICE_HOST=pen-catalogue
      - CATALOGUE_SERVICE_PORT=8081
      - API_BASE_URL=http://pen-catalogue:8081
      - REACT_APP_STORE_NAME=Moby SwagStore
    networks:
      - frontend
      - monitoring
    labels: *security-labels
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    read_only: true
    tmpfs:
      - /tmp
      - /var/cache/nginx
      - /var/run
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - pen-catalogue

  # Backend API with Model Runner Integration
  backend:
    image: registry.hub.docker.com/dockerhub/hardened-node:18-alpine
    container_name: swagstore-backend
    user: "1000:1000"  # rootless
    restart: unless-stopped
    working_dir: /app
    ports:
      - "8000:8000"
    environment:
      <<: *common-variables
      NODE_ENV: production
      PORT: 8000
      MCPGATEWAY_ENDPOINT: http://mcp-gateway:8811/sse
      MONGODB_URI: mongodb://admin:password@mongodb:27017/swagstore
      AI_DEFAULT_MODEL: ai/qwen3
    volumes:
      - ./src/backend:/app:ro
      - ./security/policies:/app/security:ro
    networks:
      - backend
      - monitoring
    labels: *security-labels
    secrets:
      - postgres_password
      - jwt_secret
      - mcp_api_key
      - openai_api_key
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    depends_on:
      - postgres
      - mongodb
      - mcp-gateway
    models:
      qwen3:
        endpoint_var: MODEL_RUNNER_URL
        model_var: MODEL_RUNNER_MODEL

  # Product Catalogue Service (following pen-shop-demo pattern)
  pen-catalogue:
    image: registry.hub.docker.com/dockerhub/hardened-node:18-alpine
    container_name: swagstore-catalogue
    user: "1000:1000"  # rootless
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - MYSQL_HOST=catalogue-db
      - MYSQL_PORT=3306
      - MYSQL_DATABASE=swagstore
      - MYSQL_USER=root
      - MYSQL_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
    volumes:
      - ./src/catalogue:/app:ro
    networks:
      - backend
      - monitoring
    labels: *security-labels
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
      - /app/logs
    depends_on:
      - catalogue-db
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Gateway (Correct Implementation)
  mcp-gateway:
    image: docker/mcp-gateway:latest
    container_name: swagstore-mcp-gateway
    ports:
      - "8811:8811"
    use_api_socket: true
    command:
      - --transport=sse
      - --servers=fetch,brave,curl,mongodb,inventory,customer,payment
      - --config=/mcp_config
      - --verbose
    configs:
      - mcp_config
    networks:
      - backend
      - monitoring
    labels: *security-labels
    depends_on:
      - mongodb
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8811/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MySQL Database for Product Catalogue
  catalogue-db:
    image: registry.hub.docker.com/dockerhub/hardened-mysql:8.0
    container_name: swagstore-catalogue-db
    user: "999:999"  # mysql user
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-password}
      - MYSQL_DATABASE=swagstore
      - MYSQL_USER=swaguser
      - MYSQL_PASSWORD=swagpass
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/mysql-init:/docker-entrypoint-initdb.d:ro
    networks:
      - backend
      - monitoring
    labels: *security-labels
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    ports:
      - "3306:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL Database for User Data
  postgres:
    image: registry.hub.docker.com/dockerhub/hardened-postgres:15-alpine
    container_name: swagstore-postgres
    user: "999:999"  # postgres user
    restart: unless-stopped
    environment:
      <<: *common-variables
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres_password
      POSTGRES_INITDB_ARGS: "--auth-local=peer --auth-host=md5"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/postgres-init:/docker-entrypoint-initdb.d:ro
      - ./security/certificates/ca.crt:/var/lib/postgresql/ca.crt:ro
    networks:
      - backend
      - monitoring
    labels: *security-labels
    secrets:
      - postgres_password
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE
      - FOWNER
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U swagstore_user -d swagstore"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MongoDB for MCP Data and Agent State
  mongodb:
    image: registry.hub.docker.com/dockerhub/hardened-mongo:7.0
    container_name: swagstore-mongodb
    user: "999:999"  # mongodb user
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=swagstore
    volumes:
      - mongodb_data:/data/db
      - ./data/mongodb-init:/docker-entrypoint-initdb.d:ro
    networks:
      - backend
      - monitoring
    labels: *security-labels
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    command: [mongod, --quiet, --logpath, /var/log/mongodb/mongod.log, --logappend]
    healthcheck:
      test: [CMD, mongosh, --eval, "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: registry.hub.docker.com/dockerhub/hardened-redis:7-alpine
    container_name: swagstore-redis
    user: "999:999"  # redis user
    restart: unless-stopped
    command: ["redis-server", "/etc/redis/redis.conf"]
    volumes:
      - redis_data:/data
      - ./config/redis/redis.conf:/etc/redis/redis.conf:ro
    networks:
      - backend
      - monitoring
    labels: *security-labels
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    read_only: true
    tmpfs:
      - /tmp
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Wazuh Manager - Security Monitoring
  wazuh-manager:
    image: registry.hub.docker.com/ajeetraina/wazuh-manager-hardened:4.7.0
    container_name: swagstore-wazuh-manager
    user: "1000:1000"  # rootless
    restart: unless-stopped
    environment:
      INDEXER_URL: "https://wazuh-indexer:9200"
      INDEXER_USERNAME: "admin"
      INDEXER_PASSWORD: "SecretPassword"
      FILEBEAT_SSL_VERIFICATION_MODE: "certificate"
    volumes:
      - wazuh_data:/var/ossec/data
      - ./config/wazuh/wazuh.conf:/var/ossec/etc/ossec.conf:ro
      - ./data/logs:/var/log/host-logs:ro
      - ./security/certificates:/etc/ssl/certs:ro
    ports:
      - "1514:1514"  # Agent connection
      - "1515:1515"  # Agent enrollment
      - "55000:55000" # API
    networks:
      - monitoring
    labels: *security-labels
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:55000"]
      interval: 60s
      timeout: 30s
      retries: 3

  # Wazuh Dashboard - Security Interface
  wazuh-dashboard:
    image: registry.hub.docker.com/ajeetraina/wazuh-dashboard-hardened:4.7.0
    container_name: swagstore-wazuh-dashboard
    user: "1000:1000"  # rootless
    restart: unless-stopped
    environment:
      INDEXER_USERNAME: "admin"
      INDEXER_PASSWORD: "SecretPassword"
      WAZUH_API_URL: "https://wazuh-manager"
      DASHBOARD_USERNAME: "admin"
      DASHBOARD_PASSWORD: "SecretPassword"
    ports:
      - "443:5601"
    volumes:
      - ./config/wazuh/dashboard.yml:/usr/share/wazuh-dashboard/data/wazuh/config/wazuh.yml:ro
    networks:
      - monitoring
    labels: *security-labels
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    depends_on:
      - wazuh-manager
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5601/status"]
      interval: 60s
      timeout: 30s
      retries: 3

# Model Runner Configuration (Docker Desktop integration)
models:
  qwen3:
    model: ai/qwen3:14B-Q6_K
    context_size: 32768

volumes:
  postgres_data:
    driver: local
  mysql_data:
    driver: local
  mongodb_data:
    driver: local
  redis_data:
    driver: local
  wazuh_data:
    driver: local

configs:
  mcp_config:
    content: |
      mongodb:
        connection_string: mongodb://admin:password@mongodb:27017/swagstore
      postgres:
        connection_string: postgresql://swagstore_user:password@postgres:5432/swagstore
      brave:
        api_key: ${BRAVE_API_KEY:-demo_key}
      inventory:
        endpoint: http://backend:8000/mcp/inventory
      customer:
        endpoint: http://backend:8000/mcp/customer
      payment:
        endpoint: http://backend:8000/mcp/payment